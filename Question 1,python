import random

# Hash function using folding technique
def hash_function(ic_number, table_size):
    # Ensure the IC number is 12 digits (padding if necessary)
    ic_str = str(ic_number).zfill(12)  # Converts IC number to string, ensuring it's 12 digits
    
    # Folding technique: Split the IC number into three 4-digit parts and sum them
    part1 = int(ic_str[:4])  # First 4 digits
    part2 = int(ic_str[4:8])  # Next 4 digits
    part3 = int(ic_str[8:])  # Last 4 digits
    
    # Sum the parts and take modulus with table size
    hash_code = (part1 + part2 + part3) % table_size  # Calculate hash code by summing parts and using modulus
    return hash_code  # Return the computed hash code

# Function to insert IC numbers into the table using separate chaining
def insert_ic_number(ic_number, table, table_size):
    hash_code = hash_function(ic_number, table_size)  # Call hash function to get the index
    table[hash_code].append(ic_number)  # Insert IC number into the list at the hash index

# Function to calculate total collisions in the table
def calculate_collisions(table, table_size):
    total_collisions = 0  # Initialize collision counter
    for i in range(table_size):  # Iterate through each index in the hash table
        if len(table[i]) > 1:  # If there is more than one element at the index, it's a collision
            total_collisions += len(table[i]) - 1  # Add the number of collisions (length of chain - 1)
    return total_collisions  # Return total number of collisions

# Function to print results in a table format
def print_results(collisions_table_1, collisions_table_2, avg_collisions_table_1, avg_collisions_table_2):
    print(f"Total collisions for Table 1 over 10 rounds:")  # Print header for Table 1 collisions
    print(f"{'Round':<6} {'Collisions'}")  # Print column labels
    for i, collisions in enumerate(collisions_table_1, start=1):  # Loop through the collision data of Table 1
        print(f"{i:<6} {collisions}")  # Print round number and collisions for each round
    print(f"\nAverage collisions for Table 1: {avg_collisions_table_1:.1f}")  # Print average collisions for Table 1

    print(f"\nTotal collisions for Table 2 over 10 rounds:")  # Print header for Table 2 collisions
    print(f"{'Round':<6} {'Collisions'}")  # Print column labels
    for i, collisions in enumerate(collisions_table_2, start=1):  # Loop through the collision data of Table 2
        print(f"{i:<6} {collisions}")  # Print round number and collisions for each round
    print(f"\nAverage collisions for Table 2: {avg_collisions_table_2:.1f}")  # Print average collisions for Table 2

# Define the table sizes (number of buckets in the hash table)
table_size_1 = 1009  # First hash table size
table_size_2 = 2003  # Second hash table size

# Create empty hash tables with lists for separate chaining
# Each index in the table will store a list, so collisions can be handled using chains (lists)
hash_table_1 = [[] for _ in range(table_size_1)]  # Create hash table with 1009 buckets
hash_table_2 = [[] for _ in range(table_size_2)]  # Create hash table with 2003 buckets

# List to store total collisions for each round for both tables
total_collisions_table_1 = []  # List to store collision count for Table 1
total_collisions_table_2 = []  # List to store collision count for Table 2

# Repeat the process for 10 rounds (i.e., simulate 10 hash table fills)
for round_num in range(10):  # Loop for 10 rounds
    # Reset tables for each round to ensure no previous data is carried over
    hash_table_1 = [[] for _ in range(table_size_1)]  # Clear hash table 1
    hash_table_2 = [[] for _ in range(table_size_2)]  # Clear hash table 2

    # Insert 1000 randomly generated IC numbers into the tables for this round
    for _ in range(1000):  # Loop to generate and insert 1000 IC numbers
        ic_number = random.randint(100000000000, 999999999999)  # Generate a random 12-digit IC number
        insert_ic_number(ic_number, hash_table_1, table_size_1)  # Insert into hash table 1
        insert_ic_number(ic_number, hash_table_2, table_size_2)  # Insert into hash table 2
    
    # Calculate collisions for both tables after inserting the IC numbers
    collisions_table_1 = calculate_collisions(hash_table_1, table_size_1)  # Calculate collisions for Table 1
    collisions_table_2 = calculate_collisions(hash_table_2, table_size_2)  # Calculate collisions for Table 2

    # Append the results of the collisions for the round to the respective lists
    total_collisions_table_1.append(collisions_table_1)  # Add collisions count for Table 1 in this round
    total_collisions_table_2.append(collisions_table_2)  # Add collisions count for Table 2 in this round

# Calculate the average collisions for both tables over 10 rounds
average_collisions_table_1 = sum(total_collisions_table_1) / 10  # Average collisions for Table 1
average_collisions_table_2 = sum(total_collisions_table_2) / 10  # Average collisions for Table 2

# Print the results
print_results(total_collisions_table_1, total_collisions_table_2, average_collisions_table_1, average_collisions_table_2)
